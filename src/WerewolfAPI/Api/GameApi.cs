/* 
 * Werewolf Engine
 *
 * This is a werewolf game engine for REST access. It is primarily developed for CPE200 class at Computer Engineering, Chiang Mai University.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: pruetboonma@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using WerewolfAPI.Client;
using WerewolfAPI.Model;
using Action = WerewolfAPI.Model.Action;

namespace WerewolfAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform action on a game
        /// </summary>
        /// <remarks>
        /// Perform action of a user on a game
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to perform action</param>
        /// <param name="actionID">ID of action to perform</param>
        /// <param name="targetID">ID of target of the action</param>
        /// <returns>Game</returns>
        Action GameActionSessionIDActionIDTargetIDPost (string sessionID, long? actionID, long? targetID);

        /// <summary>
        /// Perform action on a game
        /// </summary>
        /// <remarks>
        /// Perform action of a user on a game
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to perform action</param>
        /// <param name="actionID">ID of action to perform</param>
        /// <param name="targetID">ID of target of the action</param>
        /// <returns>ApiResponse of Game</returns>
        ApiResponse<Action> GameActionSessionIDActionIDTargetIDPostWithHttpInfo (string sessionID, long? actionID, long? targetID);
        /// <summary>
        /// Get list of games
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Game&gt;</returns>
        List<Game> GameGet ();

        /// <summary>
        /// Get list of games
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Game&gt;</returns>
        ApiResponse<List<Game>> GameGetWithHttpInfo ();
        /// <summary>
        /// Leave a game
        /// </summary>
        /// <remarks>
        /// Leave   game as a player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to leave game</param>
        /// <returns>Game</returns>
        Game GameSessionSessionIDDelete (string sessionID);

        /// <summary>
        /// Leave a game
        /// </summary>
        /// <remarks>
        /// Leave   game as a player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to leave game</param>
        /// <returns>ApiResponse of Game</returns>
        ApiResponse<Game> GameSessionSessionIDDeleteWithHttpInfo (string sessionID);
        /// <summary>
        /// Get game session
        /// </summary>
        /// <remarks>
        /// Get game session information
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to get game information</param>
        /// <returns>Game</returns>
        Game GameSessionSessionIDGet (string sessionID);

        /// <summary>
        /// Get game session
        /// </summary>
        /// <remarks>
        /// Get game session information
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to get game information</param>
        /// <returns>ApiResponse of Game</returns>
        ApiResponse<Game> GameSessionSessionIDGetWithHttpInfo (string sessionID);
        /// <summary>
        /// Join a game
        /// </summary>
        /// <remarks>
        /// Join an available game as a player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to join game</param>
        /// <returns>Game</returns>
        Game GameSessionSessionIDPost (string sessionID);

        /// <summary>
        /// Join a game
        /// </summary>
        /// <remarks>
        /// Join an available game as a player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to join game</param>
        /// <returns>ApiResponse of Game</returns>
        ApiResponse<Game> GameSessionSessionIDPostWithHttpInfo (string sessionID);
        /// <summary>
        /// Find game by ID
        /// </summary>
        /// <remarks>
        /// Returns a single game
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">ID of game to return</param>
        /// <returns>Game</returns>
        Game GetGameById (long? gameId);

        /// <summary>
        /// Find game by ID
        /// </summary>
        /// <remarks>
        /// Returns a single game
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">ID of game to return</param>
        /// <returns>ApiResponse of Game</returns>
        ApiResponse<Game> GetGameByIdWithHttpInfo (long? gameId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Perform action on a game
        /// </summary>
        /// <remarks>
        /// Perform action of a user on a game
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to perform action</param>
        /// <param name="actionID">ID of action to perform</param>
        /// <param name="targetID">ID of target of the action</param>
        /// <returns>Task of Game</returns>
        System.Threading.Tasks.Task<Action> GameActionSessionIDActionIDTargetIDPostAsync (string sessionID, long? actionID, long? targetID);

        /// <summary>
        /// Perform action on a game
        /// </summary>
        /// <remarks>
        /// Perform action of a user on a game
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to perform action</param>
        /// <param name="actionID">ID of action to perform</param>
        /// <param name="targetID">ID of target of the action</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        System.Threading.Tasks.Task<ApiResponse<Action>> GameActionSessionIDActionIDTargetIDPostAsyncWithHttpInfo (string sessionID, long? actionID, long? targetID);
        /// <summary>
        /// Get list of games
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Game&gt;</returns>
        System.Threading.Tasks.Task<List<Game>> GameGetAsync ();

        /// <summary>
        /// Get list of games
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Game&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Game>>> GameGetAsyncWithHttpInfo ();
        /// <summary>
        /// Leave a game
        /// </summary>
        /// <remarks>
        /// Leave   game as a player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to leave game</param>
        /// <returns>Task of Game</returns>
        System.Threading.Tasks.Task<Game> GameSessionSessionIDDeleteAsync (string sessionID);

        /// <summary>
        /// Leave a game
        /// </summary>
        /// <remarks>
        /// Leave   game as a player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to leave game</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        System.Threading.Tasks.Task<ApiResponse<Game>> GameSessionSessionIDDeleteAsyncWithHttpInfo (string sessionID);
        /// <summary>
        /// Get game session
        /// </summary>
        /// <remarks>
        /// Get game session information
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to get game information</param>
        /// <returns>Task of Game</returns>
        System.Threading.Tasks.Task<Game> GameSessionSessionIDGetAsync (string sessionID);

        /// <summary>
        /// Get game session
        /// </summary>
        /// <remarks>
        /// Get game session information
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to get game information</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        System.Threading.Tasks.Task<ApiResponse<Game>> GameSessionSessionIDGetAsyncWithHttpInfo (string sessionID);
        /// <summary>
        /// Join a game
        /// </summary>
        /// <remarks>
        /// Join an available game as a player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to join game</param>
        /// <returns>Task of Game</returns>
        System.Threading.Tasks.Task<Game> GameSessionSessionIDPostAsync (string sessionID);

        /// <summary>
        /// Join a game
        /// </summary>
        /// <remarks>
        /// Join an available game as a player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to join game</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        System.Threading.Tasks.Task<ApiResponse<Game>> GameSessionSessionIDPostAsyncWithHttpInfo (string sessionID);
        /// <summary>
        /// Find game by ID
        /// </summary>
        /// <remarks>
        /// Returns a single game
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">ID of game to return</param>
        /// <returns>Task of Game</returns>
        System.Threading.Tasks.Task<Game> GetGameByIdAsync (long? gameId);

        /// <summary>
        /// Find game by ID
        /// </summary>
        /// <remarks>
        /// Returns a single game
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">ID of game to return</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        System.Threading.Tasks.Task<ApiResponse<Game>> GetGameByIdAsyncWithHttpInfo (long? gameId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameApi : IGameApi
    {
        private WerewolfAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GameApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = WerewolfAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GameApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = WerewolfAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WerewolfAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Perform action on a game Perform action of a user on a game
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to perform action</param>
        /// <param name="actionID">ID of action to perform</param>
        /// <param name="targetID">ID of target of the action</param>
        /// <returns>Game</returns>
        public Action GameActionSessionIDActionIDTargetIDPost (string sessionID, long? actionID, long? targetID)
        {
             ApiResponse<Action> localVarResponse = GameActionSessionIDActionIDTargetIDPostWithHttpInfo(sessionID, actionID, targetID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform action on a game Perform action of a user on a game
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to perform action</param>
        /// <param name="actionID">ID of action to perform</param>
        /// <param name="targetID">ID of target of the action</param>
        /// <returns>ApiResponse of Game</returns>
        public ApiResponse< Action > GameActionSessionIDActionIDTargetIDPostWithHttpInfo (string sessionID, long? actionID, long? targetID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling GameApi->GameActionSessionIDActionIDTargetIDPost");
            // verify the required parameter 'actionID' is set
            if (actionID == null)
                throw new ApiException(400, "Missing required parameter 'actionID' when calling GameApi->GameActionSessionIDActionIDTargetIDPost");
            // verify the required parameter 'targetID' is set
            if (targetID == null)
                throw new ApiException(400, "Missing required parameter 'targetID' when calling GameApi->GameActionSessionIDActionIDTargetIDPost");

            var localVarPath = "/game/action/{sessionID}/{actionID}/{targetID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter
            if (actionID != null) localVarPathParams.Add("actionID", Configuration.ApiClient.ParameterToString(actionID)); // path parameter
            if (targetID != null) localVarPathParams.Add("targetID", Configuration.ApiClient.ParameterToString(targetID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameActionSessionIDActionIDTargetIDPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Action>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Action) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Action)));
        }

        /// <summary>
        /// Perform action on a game Perform action of a user on a game
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to perform action</param>
        /// <param name="actionID">ID of action to perform</param>
        /// <param name="targetID">ID of target of the action</param>
        /// <returns>Task of Game</returns>
        public async System.Threading.Tasks.Task<Action> GameActionSessionIDActionIDTargetIDPostAsync (string sessionID, long? actionID, long? targetID)
        {
             ApiResponse<Action> localVarResponse = await GameActionSessionIDActionIDTargetIDPostAsyncWithHttpInfo(sessionID, actionID, targetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform action on a game Perform action of a user on a game
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to perform action</param>
        /// <param name="actionID">ID of action to perform</param>
        /// <param name="targetID">ID of target of the action</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Action>> GameActionSessionIDActionIDTargetIDPostAsyncWithHttpInfo (string sessionID, long? actionID, long? targetID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling GameApi->GameActionSessionIDActionIDTargetIDPost");
            // verify the required parameter 'actionID' is set
            if (actionID == null)
                throw new ApiException(400, "Missing required parameter 'actionID' when calling GameApi->GameActionSessionIDActionIDTargetIDPost");
            // verify the required parameter 'targetID' is set
            if (targetID == null)
                throw new ApiException(400, "Missing required parameter 'targetID' when calling GameApi->GameActionSessionIDActionIDTargetIDPost");

            var localVarPath = "/game/action/{sessionID}/{actionID}/{targetID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter
            if (actionID != null) localVarPathParams.Add("actionID", Configuration.ApiClient.ParameterToString(actionID)); // path parameter
            if (targetID != null) localVarPathParams.Add("targetID", Configuration.ApiClient.ParameterToString(targetID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameActionSessionIDActionIDTargetIDPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Action>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Action) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Action)));
        }

        /// <summary>
        /// Get list of games 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Game&gt;</returns>
        public List<Game> GameGet ()
        {
             ApiResponse<List<Game>> localVarResponse = GameGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of games 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Game&gt;</returns>
        public ApiResponse< List<Game> > GameGetWithHttpInfo ()
        {

            var localVarPath = "/game";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Game>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Game>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Game>)));
        }

        /// <summary>
        /// Get list of games 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Game&gt;</returns>
        public async System.Threading.Tasks.Task<List<Game>> GameGetAsync ()
        {
             ApiResponse<List<Game>> localVarResponse = await GameGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of games 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Game&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Game>>> GameGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/game";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Game>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Game>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Game>)));
        }

        /// <summary>
        /// Leave a game Leave   game as a player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to leave game</param>
        /// <returns>Game</returns>
        public Game GameSessionSessionIDDelete (string sessionID)
        {
             ApiResponse<Game> localVarResponse = GameSessionSessionIDDeleteWithHttpInfo(sessionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leave a game Leave   game as a player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to leave game</param>
        /// <returns>ApiResponse of Game</returns>
        public ApiResponse< Game > GameSessionSessionIDDeleteWithHttpInfo (string sessionID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling GameApi->GameSessionSessionIDDelete");

            var localVarPath = "/game/session/{sessionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameSessionSessionIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Game>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Game) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Game)));
        }

        /// <summary>
        /// Leave a game Leave   game as a player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to leave game</param>
        /// <returns>Task of Game</returns>
        public async System.Threading.Tasks.Task<Game> GameSessionSessionIDDeleteAsync (string sessionID)
        {
             ApiResponse<Game> localVarResponse = await GameSessionSessionIDDeleteAsyncWithHttpInfo(sessionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leave a game Leave   game as a player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to leave game</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Game>> GameSessionSessionIDDeleteAsyncWithHttpInfo (string sessionID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling GameApi->GameSessionSessionIDDelete");

            var localVarPath = "/game/session/{sessionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameSessionSessionIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Game>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Game) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Game)));
        }

        /// <summary>
        /// Get game session Get game session information
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to get game information</param>
        /// <returns>Game</returns>
        public Game GameSessionSessionIDGet (string sessionID)
        {
             ApiResponse<Game> localVarResponse = GameSessionSessionIDGetWithHttpInfo(sessionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get game session Get game session information
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to get game information</param>
        /// <returns>ApiResponse of Game</returns>
        public ApiResponse< Game > GameSessionSessionIDGetWithHttpInfo (string sessionID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling GameApi->GameSessionSessionIDGet");

            var localVarPath = "/game/session/{sessionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameSessionSessionIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Game>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Game) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Game)));
        }

        /// <summary>
        /// Get game session Get game session information
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to get game information</param>
        /// <returns>Task of Game</returns>
        public async System.Threading.Tasks.Task<Game> GameSessionSessionIDGetAsync (string sessionID)
        {
             ApiResponse<Game> localVarResponse = await GameSessionSessionIDGetAsyncWithHttpInfo(sessionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get game session Get game session information
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to get game information</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Game>> GameSessionSessionIDGetAsyncWithHttpInfo (string sessionID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling GameApi->GameSessionSessionIDGet");

            var localVarPath = "/game/session/{sessionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameSessionSessionIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Game>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Game) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Game)));
        }

        /// <summary>
        /// Join a game Join an available game as a player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to join game</param>
        /// <returns>Game</returns>
        public Game GameSessionSessionIDPost (string sessionID)
        {
             ApiResponse<Game> localVarResponse = GameSessionSessionIDPostWithHttpInfo(sessionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join a game Join an available game as a player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to join game</param>
        /// <returns>ApiResponse of Game</returns>
        public ApiResponse< Game > GameSessionSessionIDPostWithHttpInfo (string sessionID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling GameApi->GameSessionSessionIDPost");

            var localVarPath = "/game/session/{sessionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameSessionSessionIDPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Game>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Game) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Game)));
        }

        /// <summary>
        /// Join a game Join an available game as a player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to join game</param>
        /// <returns>Task of Game</returns>
        public async System.Threading.Tasks.Task<Game> GameSessionSessionIDPostAsync (string sessionID)
        {
             ApiResponse<Game> localVarResponse = await GameSessionSessionIDPostAsyncWithHttpInfo(sessionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join a game Join an available game as a player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;session to join game</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Game>> GameSessionSessionIDPostAsyncWithHttpInfo (string sessionID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling GameApi->GameSessionSessionIDPost");

            var localVarPath = "/game/session/{sessionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameSessionSessionIDPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Game>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Game) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Game)));
        }

        /// <summary>
        /// Find game by ID Returns a single game
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">ID of game to return</param>
        /// <returns>Game</returns>
        public Game GetGameById (long? gameId)
        {
             ApiResponse<Game> localVarResponse = GetGameByIdWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find game by ID Returns a single game
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">ID of game to return</param>
        /// <returns>ApiResponse of Game</returns>
        public ApiResponse< Game > GetGameByIdWithHttpInfo (long? gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GetGameById");

            var localVarPath = "/game/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("gameId", Configuration.ApiClient.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGameById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Game>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Game) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Game)));
        }

        /// <summary>
        /// Find game by ID Returns a single game
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">ID of game to return</param>
        /// <returns>Task of Game</returns>
        public async System.Threading.Tasks.Task<Game> GetGameByIdAsync (long? gameId)
        {
             ApiResponse<Game> localVarResponse = await GetGameByIdAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find game by ID Returns a single game
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">ID of game to return</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Game>> GetGameByIdAsyncWithHttpInfo (long? gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GetGameById");

            var localVarPath = "/game/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("gameId", Configuration.ApiClient.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGameById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Game>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Game) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Game)));
        }

    }
}
